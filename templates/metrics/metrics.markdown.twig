INTRODUKTION
------
I denna rapport kommer jag analysera och diskutera kring validatorers syn på min kod i arbetet för krusmoment 1 till 6.
Vi tittar närmre på de 4 C som står för Coverage, Complexity, Cohesion och Coupling.

Coverage - Täckning innebär den mängd kod som mina tester faktiskt testar.

Complexity - Komplexiteten i koden syftar på hur många jämförelser och kontroller som sker. Utgångsläget i en metod är 1, för varje 
if-sats eller while-loop så ökar vi komplexiteten med 1.

Cohesion - Sammanhållningen i en klass visar hur en klass riktar sig till ett relevant område och inte spretar ut mot andra. Vi vill ha en 
hög sammanhållning för att ha klasser som är lätta att förstå och att underhålla.

Coupling - Ihopkoppling menar hur våra klasser kommunicerar med varandra och hur de är kopplade. Vi undviker Tight Coupling som till exempel att 
klasserna pratar direkt med varandra och hämtar data där, vi vill ha en loose coupling där kommunikationen går via ett interface.

I min täckning så har jag 21.05% för hela projektet. Siffran kan tyckas vara låg men om vi tittar närmre på vilka klasser som har täckning så är det Card och Game 
som uppnår 100% vardera. I kmom05 var fokus på att skriva tester för just dessa klasser, de övriga har 0%. Kollar vi på komplexitet så försöker vi ligga så lågt som möjligt. 
För klasser så har min CardController högst med 32, på plats två är det GameController som har 18. Efter dessa så minskar komplexiteten hastigt. Jag försöker hålla mig under 
10 när jag skriver metoder, min högsta är Hand::getSum() med 8 i komplexitet, på plats två är det CardController::dealPost() med 7. Därefter ligger metoder mellan 1-6.

För Cohesion så tittar jag på betyget A-F för mina klasser och metoder på Scrutinizer. Jag har betyget 9.82 för min kod vilket jag tar som ett gott tecken då jag försökt att 
skapa nya klasser för specifika ändamål. När jag inspekterar resultatet från PHP Metrics för Coupling så är mina två högsta Afferent Coupling, (antal klasses som påverkas av den nämnda klassen), 
Deck och Dice med 4. Därefter ligger siffran på mellan 1-2. Efferent Coupling syftar på hur många klasser som nämnd klass påverkas av, de 14 första är Controllers och Repositories med värden mellan 
3-7. Min klasser ligger mellan 0-3.

PHPMETRICS
------
Resultat från PHPMetrics.

Coverage - Jag kikar på Comment Weight för att se att min kod är väldokumenterad. Jag vill minnas att jag skrivit många kommentarer genom veckorna men upptäcker att samtliga klasser utanför kontrollerna 
har noll kommentarer. Jag ser gärna att koden är väldokumenterad för att vara lättare att förstå när man vid ett senare skede sätter sig ner framför projektet. En god siffra för mig skulle vara 25.

Complexity - I Average cyclomatic complexity by class så har jag 4.12 i värde. Vi ser genomsnittet på beslutspunkter över alla mina klasser. Snittet ser bra ut vid första ögonkastet. Klassen med 
högst komplexitet har 23, CardController. Näst på listan är GameController med 11. Jag hade gärna fått ner CardController en aning men jag har många viktiga beslutspunkter beroende på vilka val användaren 
gör. Kanske skulle klassen delats upp i flera olika, uppgifter beskrevs som att göra en CardController med viss funktionalitet.

Coupling - Afferent Coupling 0-4, Efferent Coupling 0-7. Jag har haft visionen att bygga smala kontrollers med tjocka klasser. I detta så har jag valt att lägga vissa klasser så att de har direkt 
kommunikation med varandra, där det känns logiskt. Game håller en kortlek som håller kort, Game håller även en hand som i sin tur också håller kort.

Cohesion - 11 klasser är röda, 4 gula och 11 gröna. Av de klasser som jag skapat, som inte är exempel från övningar så är 8 röda, 3 gula och 5 gröna. Det stora bovarna är Controllers för Game och 
Card, med klasserna Hand och Deck i täten. Jag upplever att mina klasser håller sig till sitt specifika område trots allt. CardController håller routes för alla sidor som har med Card-uppgiften att göra, 
GameController håller alla routes för de som har med spelet att göra. Deck skapar och håller en kortlek med metoder för att dra kort och visa kort. Handen håller kort för en spelare med metoder för att visa sin hand 
och räkna summan bland annat.

SCRUTINIZER
------
Resultat från Scrutinizer.

Coverage - Här får jag data för mina testers kodtäckning, 22%. Som jag påpekat ovan så är kodtäckningen för Card- och Game-klasserna 100%. Jag får kika på hur vi testar Controllers.

Complexity - För Klassers komplexitet är CardController i botten med 32. De som följer är GameController - 18, Game - 16, Deck - 14, Hand - 11. Därefter ligger komplexiteten på 10 eller mindre.
Jag känner mig nöjd med siffrorna, enda synpunkten skulle vara att minska ner min controllers för att fylla på i klasserna. I vissa fall så behöver jag några if-satser för att kunna se vilket val 
användaren gjorde i föregående formulär. Alla klasser har komplexitet 8 eller mindre, vilket jag är nöjd med.

Coupling - Som ovanför, Afferent Coupling 0-4, Efferent Coupling 0-7. Jag har haft visionen att bygga smala kontrollers med tjocka klasser. I detta så har jag valt att lägga vissa klasser så att de har direkt 
kommunikation med varandra, där det känns logiskt. Game håller en kortlek som håller kort, Game håller även en hand som i sin tur också håller kort.

Cohesion - Som ovanför, Cohesion - 11 klasser är röda, 4 gula och 11 gröna. Av de klasser som jag skapat, som inte är exempel från övningar så är 8 röda, 3 gula och 5 gröna. Det stora bovarna är Controllers för Game och 
Card, med klasserna Hand och Deck i täten. Jag upplever att mina klasser håller sig till sitt specifika område trots allt. CardController håller routes för alla sidor som har med Card-uppgiften att göra, 
GameController håller alla routes för de som har med spelet att göra. Deck skapar och håller en kortlek med metoder för att dra kort och visa kort. Handen håller kort för en spelare med metoder för att visa sin hand 
och räkna summan bland annat.

Ett annat testvärde som jag fann intressant var helhetsbetyget 9.82. Detta var uppmuntrande då andra tester har pekat ut många brister, kanske är vi lite känsliga som programmerare när någon poängterar 
kring vår kod, men det var kul att få se att bra helhetsbetyg.

Tre saker som jag vill förbättra är bättre kommentarstäckning, högre testtäckning och se över komplexiteten i minst en klass.

FÖRBÄTTRINGAR
------
Jag tänker utöka mina tester för att nå högre resultat i andra klasser, se över mina filer och fylla i kommentarer där det känns lämpligt, se över komplexiteten i minst en klass.
Resultatet föväntar jag höja mitt betyg för Comment Weight, sänka komplexitet och öka täckning i koden.

Resultat efter implementation.

Comment Weight för klasserna Deck, Deck2, Card, Hand, Rules och Games har nu värdet 39.72-43.68. Detta värdet har ökat från 0.

Average cyclomatic complexity by class är nu 3.92, ner från 4.12. Jag justerade metoder i Hand och Card för att minska if-satser.

Kodtäckning för tester är nu 27%, upp från 22%. Jag lade till några tester för CardController, där fick jag även läsa på angående testning av controllers.

DISKUSSION
------
Nu har jag analyserat mina tester, funderat över områden som har förbättringpotential, implementerat mina förenklingar och utökat mina resultat från validatorer.
Det var ett intressant sätt att arbeta på och jag har lärt mig mycket genom uppgiftens gång, jag hittade några ställen där jag enligt validatorerna kunde förbättra min kod.
Jag följde råden och fick inte bara ett bättre resultat, utan också en kod som jag tycker känns bättre och enklare att förstå. Det finns fler områden att jobba med liknande 
"problem" i min kod för denna webbplatsen, men det krävs en del rotande och omskrivande för att genomföra allt. Detta kommer jag inte göra för min rapportsida utan jag kommer 
ta med mig dessa lärdomar in i nästa projekt för att redan från början skriva en bättre kod, nu när jag har en bättre förståelse för vad bra kod är.

Vi borde inte lyssna på validatorerna fullt ut, de kommer med många bra tips, men ibland måste vi våga stå på oss om vi verkligen tycker att koden vi skrivit är bättre från början.